# This is one of my preferred demo from Tom de Smedt
# Ported from Javascript to RapydSCript.
# RapydScript site : http://pyjeon.pythonanywhere.com/rapydscript
# Canvas.js : http://www.clips.ua.ac.be/pages/pattern-canvas
# RapydBox groups : https://groups.google.com/forum/#!forum/rapydbox
# You can see other nice RapydScript demos here :
# http://salvatore.pythonanywhere.com/RapydScript    

WIDTH,HEIGHT = 600,300

def distance(v1, v2):
    return Math.sqrt(Math.pow(v1.x-v2.x, 2) + Math.pow(v1.y-v2.y, 2))
    
class Food:
    def __init__(self, x, y, amount):
        self.x = x
        self.y = y
        self.amount = amount
        
class Pheromone:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.strength = 1.0
    def evaporate(self, m = 0.995):
        if (self.strength  > 0.01):
            self.strength = self.strength * m
        else:
            self.strength = 0
                       
class Ant:
    def __init__(self, colonny, x, y):
        self.colonny = colonny
        self.x = x
        self.y = y
        self.v = {x:0, y:0}
        self.food = False
        self.trail = []
        self.roaming = random(100)
    
    def goal(self, x, y):
        d = distance(self, {x:x,y:y}) + 0.0001
        self.v.x = (x - self.x) / d
        self.v.y = (y - self.y) / d
        self.roaming = 0
        
    def roam(self, m):
        self.v.x = self.v.x + random(-m, m)
        self.v.y = self.v.y + random(-m, m)
        self.roaming = self.roaming + 1
        if (self.roaming > self.colonny.radius):
            self.goal(self.colonny.x, self.colonny.y)
        if (distance(self, self.colonny) < 10):
            self.roaming = 0
            
    def track(self):
        for i in range(len(self.colonny.ants)):
            for j in range(len(self.colonny.ants[i].trail)):
                pheromone = self.colonny.ants[i].trail[j]
                if (distance(self, pheromone) < pheromone.strength * 30):
                    if (random() < pheromone.strength):
                        self.goal(pheromone.x, pheromone.y)
                    return

    def harvest(self):
        for i in range(len(self.colonny.foodsources)):
            food = self.colonny.foodsources[i]
            if (distance(self,food) < Math.max(1, food.amount/2 )):
                food.amount = food.amount - 1
                if (food.amount <= 0):
                    self.colonny.foodsources.splice(i, 1)
                self.trail = []
                self.trail.push(new Pheromone(food.x, food.y))
                self.trail.push(new Pheromone(self.x, self.y))
                self.food = True
                
                
    def hoard(self,m):
        self.goal(self.colonny.x, self.colonny.y)
        if (random() < ( m or 0.5)):
            self.trail.push(new Pheromone(self.x, self.y))
        if (distance(self, self.colonny) < 5):
            self.food = False
            self.colonny.food = self.colonny.food + 1
            
    def forage(self):
        if self.food == False:
            self.roam(0.3)
            self.track()
            self.harvest()
        else:
            self.hoard()
        self.v.x =  Math.clamp(self.v.x, -10, +10)
        self.v.y =  Math.clamp(self.v.y, -10, +10);
        self.x = self.x + self.v.x
        self.y = self.y + self.v.y
        for i in range(len(self.trail)):
            pheromone = self.trail[i]
            pheromone.evaporate()
            if (pheromone.strength == 0):
                self.trail.splice(i, 1)

class Colonny:
    def __init__(self, x, y, radius, size):
        self.x = x
        self.y = y
        self.radius = radius
        self.foodsources = []
        self.food = 0
        self.ants = []
        for i in range(size):
            self.ants.append(new Ant(self,  WIDTH/2 + random(20), HEIGHT/2 + random(20)))

gradient =  new Gradient(new Color(0.25,0.35,0.10),
                         new Color(0.10,0.15,0.05),
                         {x:HEIGHT,y:150,spread:250,type:RADIAL})

def rectImage():
    rect(0,0,WIDTH,HEIGHT,{fill: gradient})
    text("Created by Tom De Smedt",WIDTH-150,HEIGHT-10, {
        fill: new Color(1,1,1,0.57),
        font: "Georgia",
        fontweight: ITALIC
	})

colonny = None
terrain = None

def setup(canvas):
    nonlocal terrain,colonny
    canvas.size(WIDTH, HEIGHT)
    terrain = render(rectImage, WIDTH, HEIGHT)
    colonny = new Colonny(HEIGHT, 150, 200, 20);
    for i in range(10):
        colonny.foodsources.push(
            new  Food(random(30,-30 + canvas.width), 
					  random(30,-30 + canvas.height), 
					  random(20, 50)))

def draw(canvas):
    image(terrain)
    fill(1,0.1)
    ellipse(colonny.x,colonny.y,colonny.food, colonny.food)
    fill(1,0.4)
    for food in colonny.foodsources:
        ellipse(food.x, food.y, food.amount, food.amount)
    p = new BezierPath()
    for ant in colonny.ants:
        if (len(ant.trail) > 0):
            for i in range(len(ant.trail)):
                if (i == 0):
                    p.moveto(ant.trail[i].x, ant.trail[i].y)
                else:
                    p.lineto(ant.trail[i].x, ant.trail[i].y)
    drawpath(p, {stroke: new Color(1, 0.2), strokewidth: 0.5, fill: null})
    for ant in colonny.ants:
        ant.forage()
        if (ant.food == True):
            fill(0.5, 1, 0);
        else:
            fill(1, 0.4);
        ellipse(ant.x, ant.y, 3, 3)
    

canvas.setup = setup
canvas.draw = draw draw
canvas.run()